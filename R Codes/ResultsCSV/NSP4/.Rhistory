H <- 1.57 * IQR(x$Distance)/sqrt(length(x$Distance))
list(Median,CI=c(Median-H,Median+H))
})
#' 3- NSP2rojo-VP760verde.csv
#' 4- NSP2rojo-VP7159verde.csv
#' 5- NSP2rojo-VP1verde.csv
#' 6- NSP2rojo-VP2verde.csv
#' 7- NSP4rojo-NSP2verde.csv
#' 8- NSP5rojo-NSP2verde.csv
#' All these files have the following structure:
#' Column 1: Distance between the distribution of both proteins.
#' Column 2: Radius of the circumference that adjust the central protein.
#' Column 3: Radius of the circumference that adjust the other protein.
#' ** Note**
#' 8- NSP5rojo-NSP2verde.csv
#' All these files have the following structure:
#' Column 1: Distance between the distribution of both proteins.
#' Column 2: Radius of the circumference that adjust the central protein.
#' Column 3: Radius of the circumference that adjust the other protein.
#' @return
#'
#' @author Yasel Garces (88yasel@gmail.com)
#===================================================================================
# Load Libraries
library(dplyr)
library(cowplot)
library(plotly)
library(cowplot)
library(cowplot)
library(plotly)
library(ggsignif)
library(RColorBrewer)
library(gplots)
library(gdata)
theme_set(theme_cowplot()) # Change theme
# ----------------------------------------------------------------------------------
# Change work directory and Load data
setwd('/home/yasel/Dropbox/Paper Viroplasmas/Programs/R/ResultsCSV/NSP2/')
# ----------------------------------------------------------------------------------
# Change work directory and Load data
setwd('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/ResultsCSV/NSP2')
VP4<-read.csv('NSP2rojo-VP4verde.csv')
# Change work directory and Load data
setwd('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/ResultsCSV/NSP2')
# Load data
VP4<-read.csv('NSP2rojo-VP4verde.csv')
VP6<-read.csv('NSP2rojo-VP6verde.csv')
VP7_Mon<-read.csv('NSP2rojo-VP760verde.csv')
VP7_Tri<-read.csv('NSP2rojo-VP7159verde.csv')
NSP4<-read.csv('NSP4rojo-NSP2verde.csv')
NSP5<-read.csv('NSP5rojo-NSP2verde.csv')
VP1<-read.csv('NSP2rojo-VP1verde.csv')
VP2<-read.csv('NSP2rojo-VP2verde.csv')
# ----------------------------------------------------------------------------------
## Data manipulation
# Create a factor variable with the protein's name
VP4<-mutate(VP4, Protein='VP4')
VP6<-mutate(VP6, Protein='VP6')
VP7_Mon<-mutate(VP7_Mon, Protein='VP7_Mon')
VP7_Tri<-mutate(VP7_Tri, Protein='VP7_Tri')
NSP4<-mutate(NSP4, Protein='NSP4')
NSP5<-mutate(NSP5, Protein='NSP5')
VP1<-mutate(VP1, Protein='VP1')
VP2<-mutate(VP2, Protein='VP2')
# ----------------------------------------------------------------------------------
# Because exist differents numbers of samples for each protein combinations,
# and we want to compare the spatial distribution of differents proteins,
# we select properly 40 samples of each combination. The selections criterion
# was that in the final set there not exist statistical differences between
# the protein NSP2 in all combinations.
# **Note** The parameters for this selection can change for other images dataset
# Selection of the samples
NSP5<-tail(arrange(NSP5,desc(NSP5$ratioNSP2)),35)
NSP4<-tail(arrange(NSP4,desc(NSP4$ratioNSP2)),40)
VP7_Mon<-tail(arrange(VP7_Mon,desc(VP7_Mon$ratioNSP2)),60)
VP1<-head(arrange(VP1,desc(VP1$ratioNSP2)),40)
VP2<-head(arrange(VP2,desc(VP2$ratioNSP2)),40)
VP6<-head(arrange(VP6,desc(VP6$ratioNSP2)),60)
# ----------------------------------------------------------------------------------
# Merge the data in a same data frame
viroData<-rbind(VP6,NSP4,NSP5,VP4,VP7_Tri,VP7_Mon,VP1,VP2)
# Convert the protein's name to a factor variable
viroData$Protein<-as.factor(viroData$Protein)
# Convert from pixels to microns (this is based on our experimetal design, for
# other experiments you need to take care about how to do this conversion).
viroData$Distance=viroData$Distance/100
viroData$ratioNSP2=viroData$ratioNSP2/100
viroData$ratioOther=viroData$ratioOther/100
View(viroData)
#===================================================================================
allProteins<-mutate(viroData,Comparation="Other Protein")
View(allProteins)
forNSP2<-select(allProteins,one_of(c("ratioNSP2","Protein")))
View(forNSP2)
forNSP2<-mutate(forNSP2,Comparation="NSP2")
allProteins<-data.frame(Comparation=c(forNSP2$Comparation,allProteins$Comparation),
Protein=c(as.character(forNSP2$Protein),as.character(allProteins$Protein)),
Value=c(forNSP2$ratioNSP2,allProteins$ratioOther))
#===================================================================================
allProteins<-mutate(viroData,Comparison="Other Protein")
forNSP2<-select(allProteins,one_of(c("ratioNSP2","Protein")))
forNSP2<-mutate(forNSP2,Comparison="NSP2")
allProteins<-data.frame(Comparison=c(forNSP2$Comparison,allProteins$Comparison),
Protein=c(as.character(forNSP2$Protein),as.character(allProteins$Protein)),
Value=c(forNSP2$ratioNSP2,allProteins$ratioOther))
allProteins$Protein<-factor(allProteins$Protein,levels = levels(allProteins$Protein)[c(2,1,3,4,6,5,7,8)])
p<-ggplot(allProteins, aes(x = Protein, y = Value,fill=Comparison)) +
geom_boxplot(notch=TRUE)+ylab(expression(
paste("Circumference's Radius"," ", (paste(mu,m)))))+
theme(legend.position = "bottom")+
scale_y_continuous(breaks = seq(from = 0.2, to = 1.5, by =0.1),limits = c(0.2,1.2))
p
# ----------------------------------------------------------------------------------
# Just NSP2 in all combinations
compareNSP2<-subset(allProteins,Comparation=="NSP2")
# ----------------------------------------------------------------------------------
# Just NSP2 in all combinations
compareNSP2<-subset(allProteins,Comparison=="NSP2")
p<-ggplot(compareNSP2,aes(x = Protein,y = Value,fill="red"))+geom_boxplot(notch = TRUE)+
geom_signif(test="wilcox.test", comparisons = combn(levels(compareNSP2$Protein),2, simplify = F)[-4],
step_increase = 0.2,map_signif_level=TRUE)+theme(legend.position = "none")+ylab("Value")+xlab("NSP2")+
scale_y_continuous(breaks = seq(0,1,0.15),labels = seq(0,1,0.15))
p+theme(text = element_text(size=20),axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18))
# ----------------------------------------------------------------------------------
# Just NSP2 in all combinations
compareNSP2<-subset(allProteins,Comparison=="NSP2")
p<-ggplot(compareNSP2,aes(x = Protein,y = Value,fill="red"))+geom_boxplot(notch = TRUE)+
geom_signif(test="wilcox.test", comparisons = combn(levels(compareNSP2$Protein),2, simplify = F)[-4],
step_increase = 0.2,map_signif_level=TRUE)+theme(legend.position = "none")+ylab("Value")+xlab("NSP2")+
scale_y_continuous(breaks = seq(0,1,0.15),labels = seq(0,1,0.15))
p+theme(text = element_text(size=20),axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18))
# ----------------------------------------------------------------------------------
# Boxplot (distance to NSP2)
VP1andVP2<-subset(viroData,Protein %in% c("VP1","VP2"))
viroData<-subset(viroData,Protein!="VP1" & Protein!="VP2")
viroData$Protein<-drop.levels(viroData$Protein)
viroData$Protein<-factor(viroData$Protein,levels = levels(viroData$Protein)[c(2,1,4,3,5,6)])
# Just in viroData ----------------------------------------------
p<-ggplot(viroData, aes(x = Protein, y = Distance,fill=Protein)) +
geom_boxplot(notch=TRUE,show.legend=FALSE)+
ylab(expression(paste("Distance to NSP2"," ",(paste(mu,m)))))+
xlab("Protein")+scale_y_continuous(breaks = seq(from = -.5, to = .8, by =0.1))
p+theme(text = element_text(size=20),axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18))
p+geom_signif(test="wilcox.test", comparisons = combn(levels(viroData$Protein),2, simplify = F)[-5],
step_increase = 0.01,map_signif_level=TRUE)+
theme(text = element_text(size=20),axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18))
# ----------------------------------------------------------------------------------
# Cluster
# Merge data
ClusterViro<- summarise(group_by(viroData,Protein), Distance = mean(Distance), SdDistance=sd(ratioNSP2),
ratioNSP2=mean(ratioNSP2),Ratio=mean(ratioOther))
colnames(ClusterViro)<-c("Protein","Mean(Dist)","Sd(Dist)","Mean(NSP2)","Mean(Other)")
NewData<-as.data.frame(ClusterViro[,-1])
row.names(NewData)<-as.character(ClusterViro$Protein)
hclustfunc <- function(x) hclust(x, method="complete")
distfunc <- function(x) dist(x,method="euclidean")
d <- distfunc(NewData)
fit <- hclustfunc(d)
plot(fit)
groups <- cutree(fit, k=5)
cols <- brewer.pal(max(groups), "Set1")
heatmap.2(as.matrix(NewData),dendrogram="row",trace="none", margin=c(8,9),
hclust=hclustfunc, distfun=distfunc, RowSideColors=cols[groups],srtCol=45)
# ----------------------------------------------------------------------------------
# Hierarchically clustered heatmap for the standard deviation of the distance to
# NSP2, the mean distance to NSP2, the mean radius of NSP2, and the mean radius
# of the accompanying protein layers, NSP5, NSP4, VP6, VP4, and VP7.
# Summarise the data considering the factor variable "protein"
ClusterViro<- summarise(group_by(viroData,Protein), Distance = mean(Distance), SdDistance=sd(ratioNSP2),
ratioNSP2=mean(ratioNSP2),Ratio=mean(ratioOther))
ClusterViro
NewData<-as.data.frame(ClusterViro[,-1])
NewData
ClusterViro
# Colnames
colnames(ClusterViro)<-c("Protein","Mean(Dist)","Sd(Dist)","Mean(NSP2)","Mean(Other)")
ClusterViro
NewData<-as.data.frame(ClusterViro[,-1])
NewData
plot(fit) # Plot only he cluster
groups <- cutree(fit, k=5)
groups
#' This files have the following structure:
#' Column 1: Distance between the distribution of both proteins.
#' Column 2: Radius of the circumference that adjust the central protein.
#' Column 3: Radius of the circumference that adjust the other protein.
#' @return A set of graphics and statistics. See below for details.
#' **Note** This script is practically the same than "AnalysisNSP2.R",
#' but as a difference it include the regression model aalysis.
#' @author Yasel Garces (88yasel@gmail.com)
#===================================================================================
## FUNCTIONS
LMbyProtein<- function(data,Protein){
#' This files have the following structure:
#' Column 1: Distance between the distribution of both proteins.
#' Column 2: Radius of the circumference that adjust the central protein.
#' Column 3: Radius of the circumference that adjust the other protein.
#' @return A set of graphics and statistics. See below for details.
#' **Note** This script is practically the same than "AnalysisNSP2.R",
#' but as a difference it include the regression model aalysis.
#' @author Yasel Garces (88yasel@gmail.com)
#===================================================================================
## FUNCTIONS
LMbyProtein<- function(data,Protein){
#' This files have the following structure:
#' Column 1: Distance between the distribution of both proteins.
#' Column 2: Radius of the circumference that adjust the central protein.
#' Column 3: Radius of the circumference that adjust the other protein.
#' @return A set of graphics and statistics. See below for details.
#' **Note** This script is practically the same than "AnalysisNSP2.R",
#' but as a difference it include the regression model aalysis.
#' @author Yasel Garces (88yasel@gmail.com)
#===================================================================================
## FUNCTIONS
LMbyProtein<- function(data,Protein){
# This function adjusts a least-square linear model to a set of points (data) and
# plot
fit<-lm(y ~ x - 1,data)
t<-summary(fit)
data$predicted <- predict(fit)   # Save the predicted values
data$residuals <- residuals(fit) # Save the residual values
# Residuals graphic
# Use the residuals to make an aesthetic adjustment
# (e.g. red colour when residual in very high) to highlight points
# which are poorly predicted by the model.
Residuals<-abs(data$residuals)
res_plot<-ggplot(data, aes(x = x, y = y)) +
geom_smooth(method = "lm",formula = y~x-1, se = FALSE, color = "lightgrey") +
geom_segment(aes(xend = x, yend = predicted), alpha = .2) +
geom_point(aes(color = Residuals)) + # size also mapped
geom_point(aes(y = predicted),shape = 1)+
scale_color_continuous(low = "black", high = "red") +
guides(color = guide_colorbar())+
scale_x_continuous(breaks = seq(0,max(data$x)+0.1,by = 0.1))+
scale_y_continuous(breaks = seq(0,max(data$predicted)+0.1,by = 0.1))+
geom_label(x = min(data$x), hjust =0, y = max(data$predicted)-0.05,
label = paste("RSE=", abbreviate(as.character(t$sigma),5),"\n",
"R-squared=", abbreviate(as.character(t$r.squared),5)))+
ylab(Protein)+xlab("NSP4")+scale_fill_continuous(guide = guide_legend()) +
theme(legend.key.width = unit(2.6, 'lines'), legend.position="bottom",
axis.text.y =element_text(size=15),
axis.text.x =element_text(size=15))
# Coeff
coef<-t$coefficients
# Residuals
residual<-t$residuals
list(Res_plot=res_plot,coef=coef,res=residual)
}
}}
}
}
#' This files have the following structure:
#' Column 1: Distance between the distribution of both proteins.
#' Column 2: Radius of the circumference that adjust the central protein.
#' Column 3: Radius of the circumference that adjust the other protein.
#' @return A set of graphics and statistics. See below for details.
#' **Note** This script is practically the same than "AnalysisNSP2.R",
#' but as a difference it include the regression model aalysis.
#' @author Yasel Garces (88yasel@gmail.com)
#===================================================================================
## FUNCTIONS
LMbyProtein<- function(data,Protein){
}
LMbyProtein <- function(data,Protein){
# This function adjusts a least-square linear model to a set of points (data) and
# plot
fit<-lm(y ~ x - 1,data)
t<-summary(fit)
data$predicted <- predict(fit)   # Save the predicted values
data$residuals <- residuals(fit) # Save the residual values
# Residuals graphic
# Use the residuals to make an aesthetic adjustment
# (e.g. red colour when residual in very high) to highlight points
# which are poorly predicted by the model.
Residuals<-abs(data$residuals)
res_plot<-ggplot(data, aes(x = x, y = y)) +
geom_smooth(method = "lm",formula = y~x-1, se = FALSE, color = "lightgrey") +
geom_segment(aes(xend = x, yend = predicted), alpha = .2) +
geom_point(aes(color = Residuals)) + # size also mapped
geom_point(aes(y = predicted),shape = 1)+
scale_color_continuous(low = "black", high = "red") +
guides(color = guide_colorbar())+
scale_x_continuous(breaks = seq(0,max(data$x)+0.1,by = 0.1))+
scale_y_continuous(breaks = seq(0,max(data$predicted)+0.1,by = 0.1))+
geom_label(x = min(data$x), hjust =0, y = max(data$predicted)-0.05,
label = paste("RSE=", abbreviate(as.character(t$sigma),5),"\n",
"R-squared=", abbreviate(as.character(t$r.squared),5)))+
ylab(Protein)+xlab("NSP4")+scale_fill_continuous(guide = guide_legend()) +
theme(legend.key.width = unit(2.6, 'lines'), legend.position="bottom",
axis.text.y =element_text(size=15),
axis.text.x =element_text(size=15))
# Coeff
coef<-t$coefficients
# Residuals
residual<-t$residuals
list(Res_plot=res_plot,coef=coef,res=residual)
}
# Set work directory
setwd('/home/yasel/Dropbox/Paper Viroplasmas/Programs/R/ResultsCSV/NSP4/')
# Set work directory
setwd('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/ResultsCSV/NSP4/')
# Load data
VP6<-read.csv('NSP4vsVP6.csv')
## Data manipulation
# Create a factor variable with the protein name (VP6)
VP6<-mutate(VP6, Protein='VP6')
#===================================================================================
# Load Libraries
library(dplyr)
library(ggplot2)
library(cowplot)
library(plotly)
theme_set(theme_cowplot()) # Change theme
# Set work directory
setwd('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/ResultsCSV/NSP4/')
# Load data
viroData<-read.csv('NSP4vsVP6.csv')
## Data manipulation
# Convert the protein's name to a factor variable
viroData<-mutate(viroData, Protein='VP6')
viroData$Protein<-as.factor(viroData$Protein)
# Convert from pixels to microns (this is based on our experimetal design, for
# other experiments you need to take care about how to do this conversion).
viroData$Distance=viroData$Distance/100
viroData$ratioNSP4=viroData$ratioNSP4/100
viroData$ratioOther=viroData$ratioOther/100
#===================================================================================
# Exploratory analysis of the results obtained by the algorithm VPs-DLSFC
# Create a convinient data frame that allow to boxplot the radii distribution of
# all the combinations off proteins.
allProteins<-mutate(viroData,Comparation="Other Protein")
forNSP4<-select(allProteins,one_of(c("ratioNSP4","Protein")))
forNSP4<-mutate(forNSP4,Comparation="NSP4")
allProteins<-data.frame(Comparation=c(forNSP4$Comparation,allProteins$Comparation),
Protein=c(as.character(forNSP4$Protein),as.character(allProteins$Protein)),
Value=c(forNSP4$ratioNSP4,allProteins$ratioOther))
p<-ggplot(allProteins, aes(x = Protein, y = Value,fill=Comparation)) +
geom_boxplot(notch=TRUE)+ylab(expression(
paste("Radius of the adjusted circumference"," ", (paste(mu,m)))))+
theme(legend.position = "bottom")+
scale_y_continuous(breaks = seq(from = 0.3, to = 1, by =0.1),limits = c(0.3,1))
p
#===================================================================================
# Exploratory analysis of the results obtained by the algorithm VPs-DLSFC
# Create a convinient data frame that allow to boxplot the radii distribution of
# all the combinations off proteins.
allProteins<-mutate(viroData,Comparison="Other Protein")
forNSP4<-select(allProteins,one_of(c("ratioNSP4","Protein")))
forNSP4<-mutate(forNSP4,Comparison="NSP4")
allProteins<-data.frame(Comparison=c(forNSP4$Comparison,allProteins$Comparison),
Protein=c(as.character(forNSP4$Protein),as.character(allProteins$Protein)),
Value=c(forNSP4$ratioNSP4,allProteins$ratioOther))
p<-ggplot(allProteins, aes(x = Protein, y = Value,fill=Comparison)) +
geom_boxplot(notch=TRUE)+ylab(expression(
paste("Radius of the adjusted circumference"," ", (paste(mu,m)))))+
theme(legend.position = "bottom")+
scale_y_continuous(breaks = seq(from = 0.3, to = 1, by =0.1),limits = c(0.3,1))
p
allProteins
c(forNSP4$Comparison,allProteins$Comparison)
c(forNSP4$ratioNSP4,allProteins$ratioOther)
c(as.character(forNSP4$Protein),as.character(allProteins$Protein))
allProteins<-data.frame(Comparison=c(forNSP4$Comparison,allProteins$Comparison),
Protein=c(as.character(forNSP4$Protein),as.character(allProteins$Protein)),
Value=c(forNSP4$ratioNSP4,allProteins$ratioOther))
allProteins
## Data manipulation
# Convert the protein's name to a factor variable
viroData<-mutate(viroData, Protein='VP6')
viroData$Protein<-as.factor(viroData$Protein)
# Convert from pixels to microns (this is based on our experimetal design, for
# other experiments you need to take care about how to do this conversion).
viroData$Distance=viroData$Distance/100
viroData$ratioNSP4=viroData$ratioNSP4/100
viroData$ratioOther=viroData$ratioOther/100
#===================================================================================
# Exploratory analysis of the results obtained by the algorithm VPs-DLSFC.
# VP6 spatial distribution taking NSP4 as reference protein.
# Create a convinient data frame that allow to boxplot the radii distribution of
# all the combinations off proteins.
allProteins<-mutate(viroData,Comparison="Other Protein")
forNSP4<-select(allProteins,one_of(c("ratioNSP4","Protein")))
forNSP4<-mutate(forNSP4,Comparison="NSP4")
allProteins<-data.frame(Comparison=c(forNSP4$Comparison,allProteins$Comparison),
Protein=c(as.character(forNSP4$Protein),as.character(allProteins$Protein)),
Value=c(forNSP4$ratioNSP4,allProteins$ratioOther))
allProteins
allProteins$Comparison
W_test<-wilcox.test(VP6$ratioOther/100,VP6$ratioNSP4/100,conf.int = TRUE)
W_test
#===================================================================================
# Boxplot for the distance between NSP4 and VP6.
p<-ggplot(viroData, aes(x = Protein, y = Distance,fill=Protein)) +
geom_boxplot(notch=TRUE,show.legend=FALSE)+
ylab(expression(paste("Distance to NSP4"," ",(paste(mu,m)))))+
xlab("Protein")+scale_y_continuous(breaks = seq(from = 0, to = .3, by =0.05),limits = c(0,.3))
p
#' This script analyses the distribution of the viral proteins into
#' the viroplasm taking NSP2 as the reference protein. For details about
#' the full research consult the paper
#' "Nanoscale organization of rotavirus replication machineries", eLife.
#' @param This script uses the data collected for each protein combination that
#' are stored in the csv files:
#' 1- NSP4vsVP6.csv
#' This files have the following structure:
#' Column 1: Distance between the distribution of both proteins.
#' Column 2: Radius of the circumference that adjust the central protein.
#' Column 3: Radius of the circumference that adjust the other protein.
#' @return A set of graphics and statistics. See below for details.
#' **Note** This script is practically the same than "AnalysisNSP2.R",
#' but as a difference it include the regression model analysis.
#' @author Yasel Garces (88yasel@gmail.com)
#===================================================================================
## FUNCTIONS
LMbyProtein <- function(data,Protein){
# This function adjusts a least-square linear model to a set of points (data) and
# plot
fit<-lm(y ~ x - 1,data)
t<-summary(fit)
data$predicted <- predict(fit)   # Save the predicted values
data$residuals <- residuals(fit) # Save the residual values
# Residuals graphic
# Use the residuals to make an aesthetic adjustment
# (e.g. red colour when residual in very high) to highlight points
# which are poorly predicted by the model.
Residuals<-abs(data$residuals)
res_plot<-ggplot(data, aes(x = x, y = y)) +
geom_smooth(method = "lm",formula = y~x-1, se = FALSE, color = "lightgrey") +
geom_segment(aes(xend = x, yend = predicted), alpha = .2) +
geom_point(aes(color = Residuals)) + # size also mapped
geom_point(aes(y = predicted),shape = 1)+
scale_color_continuous(low = "black", high = "red") +
guides(color = guide_colorbar())+
scale_x_continuous(breaks = seq(0,max(data$x)+0.1,by = 0.1))+
scale_y_continuous(breaks = seq(0,max(data$predicted)+0.1,by = 0.1))+
geom_label(x = min(data$x), hjust =0, y = max(data$predicted)-0.05,
label = paste("RSE=", abbreviate(as.character(t$sigma),5),"\n",
"R-squared=", abbreviate(as.character(t$r.squared),5)))+
ylab(Protein)+xlab("NSP4")+scale_fill_continuous(guide = guide_legend()) +
theme(legend.key.width = unit(2.6, 'lines'), legend.position="bottom",
axis.text.y =element_text(size=15),
axis.text.x =element_text(size=15))
# Coeff
coef<-t$coefficients
# Residuals
residual<-t$residuals
list(Res_plot=res_plot,coef=coef,res=residual)
}
#===================================================================================
# Load Libraries
library(dplyr)
library(ggplot2)
library(cowplot)
library(plotly)
theme_set(theme_cowplot()) # Change theme
# Set work directory
setwd('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/ResultsCSV/NSP4/')
# Load data
viroData<-read.csv('NSP4vsVP6.csv')
## Data manipulation
# Convert the protein's name to a factor variable
viroData<-mutate(viroData, Protein='VP6')
viroData$Protein<-as.factor(viroData$Protein)
# Convert from pixels to microns (this is based on our experimetal design, for
# other experiments you need to take care about how to do this conversion).
viroData$Distance=viroData$Distance/100
viroData$ratioNSP4=viroData$ratioNSP4/100
viroData$ratioOther=viroData$ratioOther/100
#===================================================================================
# Exploratory analysis of the results obtained by the algorithm VPs-DLSFC.
# VP6 spatial distribution taking NSP4 as reference protein.
# Create a convinient data frame that allow to boxplot the radii distribution of
# all the combinations off proteins.
allProteins<-mutate(viroData,Comparison="Other Protein")
forNSP4<-select(allProteins,one_of(c("ratioNSP4","Protein")))
forNSP4<-mutate(forNSP4,Comparison="NSP4")
allProteins<-data.frame(Comparison=c(forNSP4$Comparison,allProteins$Comparison),
Protein=c(as.character(forNSP4$Protein),as.character(allProteins$Protein)),
Value=c(forNSP4$ratioNSP4,allProteins$ratioOther))
#===================================================================================
# Boxplot for the distance between NSP4 and VP6.
p<-ggplot(viroData, aes(x = Protein, y = Distance,fill=Protein)) +
geom_boxplot(notch=TRUE,show.legend=FALSE)+
ylab(expression(paste("Distance to NSP4"," ",(paste(mu,m)))))+
xlab("Protein")+scale_y_continuous(breaks = seq(from = 0, to = .3, by =0.05),limits = c(0,.3))
p
#===================================================================================
# Lineal dependence between NSP4 and the others proteins. That is for the ratio of the circle
p<-ggplot(viroData, aes(x = ratioNSP4, y = ratioOther,color=Protein)) + geom_point(show.legend=FALSE) +
facet_grid(~ Protein)+ xlab("Ratio NSP2")+
geom_smooth(method='lm',formula=y~x-1,show.legend=FALSE)+
scale_y_continuous(name=expression(paste("Protein Radius"," ",
(paste(mu,m)))),
breaks=seq(0, 1,0.1),limits = c(0.3,1))+
scale_x_continuous(name=expression(paste("Radius NSP4"," ",
(paste(mu,m)))))+
theme(legend.position = "none",axis.text.x = element_text(vjust = 0.5))
p
#===================================================================================
# NSP2 vs VP6
data<-data.frame(x=VP6$ratioNSP4/100,y=VP6$ratioOther/100)
LM_VP6<-LMbyProtein(data,"VP6")
LM_VP6$Res_plot
# NSP2 vs VP6
data<-data.frame(x=viroData$ratioNSP4,y=viroData$ratioOther)
LM_VP6<-LMbyProtein(data,"VP6")
LM_VP6$Res_plot
LM_VP6$res
