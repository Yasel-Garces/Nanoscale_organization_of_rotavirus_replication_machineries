axis.text.y =element_text(size=15),
axis.text.x =element_text(size=15))
# Coefficients of the linear regression model
coef<-t$coefficients
# Residual values
residual<-t$residuals
# List to return
list(Res_plot=res_plot,coef=coef,res=residual)
}
#===================================================================================
#===================================================================================
# # Load Libraries
library(dplyr)
library(ggplot2)
library(cowplot)
library(plotly)
library(ggsignif)
theme_set(theme_cowplot()) # Change theme
# Set work directory
setwd('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/ResultsCSV/NSP5/')
# Load data
VP4<-read.csv('NSP5vsVP4.csv')
VP6<-read.csv('NSP5vsVP6.csv')
## Data manipulation
# Add a new variable with the name of the NSP5 accompanying protein
VP4<-mutate(VP4, Protein='VP4')
VP6<-mutate(VP6, Protein='VP6')
# Merge the data and convert the "Protein" column to a factor variable
viroData<-rbind(VP6,VP4)
viroData$Protein<-as.factor(viroData$Protein)
# Convert from pixels to microns (this is based on our experimetal design, for
# other experiments you need to take care about how to do this conversion).
viroData$Distance=viroData$Distance/100
viroData$ratioNSP5=viroData$ratioNSP5/100
viroData$ratioOther=viroData$ratioOther/100
#===================================================================================
# VP6 and VP4 spatial distribution taking NSP5 as reference protein.
# Create a convinient data frame that allow to graphic with a boxplot the
# radii's distribution of all the combinations off proteins.
allProteins<-mutate(viroData,Comparation="Other Protein")
forNSP5<-select(allProteins,one_of(c("ratioNSP5","Protein")))
forNSP5<-mutate(forNSP5,Comparation="NSP5")
allProteins<-data.frame(Comparation=c(forNSP5$Comparation,allProteins$Comparation),
Protein=c(as.character(forNSP5$Protein),as.character(allProteins$Protein)),
Value=c(forNSP5$ratioNSP5,allProteins$ratioOther))
# Orders the factor levels
allProteins$Protein<-factor(allProteins$Protein,levels = levels(allProteins$Protein)[c(2,1,3)])
# Boxplot for the radius of the fitting circumferences. In each experimental condition
# (NSP5-VP4, NSP5-VP6) we plot two boxes, the red box is for the radius of NSP5 (reference protein),
# and the blue boxes represent the radius of the accompanying VP components (names)
p<-ggplot(allProteins, aes(x = Protein, y = Value,fill=Comparation)) +
geom_boxplot(notch=TRUE)+ylab(expression(
paste("Radius of the adjusted circumference"," ", (paste(mu,m)))))+
theme(legend.position = "bottom")+
scale_y_continuous(breaks = seq(from = 0.2, to = 1.5, by =0.1),limits = c(0.2,1.2))
p
View(allProteins)
ggplot(NSP5compare,aes(x = Protein, y = Value))+geom_boxplot(notch = TRUE)+
geom_signif(test="wilcox.test", comparisons = combn(levels(NSP5compare$Protein),2, simplify = F)[-4],
step_increase = 0.2,map_signif_level=TRUE)+
theme(legend.position = "none")
# Filter the "allProtein" dataframe to consider only the
NSP5compare<-subset(allProteins,Comparation=="NSP5")
ggplot(NSP5compare,aes(x = Protein, y = Value))+geom_boxplot(notch = TRUE)+
geom_signif(test="wilcox.test", comparisons = combn(levels(NSP5compare$Protein),2, simplify = F)[-4],
step_increase = 0.2,map_signif_level=TRUE)+
theme(legend.position = "none")
#===================================================================================
# Boxplot for the distance between NSP5 and {VP6,VP4}.
# Orders the factor levels
viroData$Protein<-factor(viroData$Protein,levels = levels(viroData$Protein)[c(2,1,3)])
p<-ggplot(viroData, aes(x = Protein, y = Distance,fill=Protein)) +
geom_boxplot(notch=TRUE,show.legend=FALSE)+
ylab(expression(paste("Distance to NSP5"," ",(paste(mu,m)))))+
xlab("Protein")+scale_y_continuous(breaks = seq(from = -.5, to = .5, by =0.1),limits = c(0,.5))+
geom_signif(test="wilcox.test", comparisons = combn(levels(viroData$Protein),2, simplify = F)[-5],
step_increase = 0.05,map_signif_level=TRUE)
p
#===================================================================================
# Linear regression fitting taking the radius of NSP5 as independent variable
# and the radius of VP6 and VP4 as dependent variable. The gray shadow represents the
# confidence interval at a level of 95%.
p<-ggplot(viroData, aes(x = ratioNSP5, y = ratioOther,color=Protein)) + geom_point(show.legend=FALSE) +
facet_grid(~ Protein)+ xlab("Ratio NSP2")+
geom_smooth(method='lm',formula=y~x-1,show.legend=FALSE)+
scale_y_continuous(name=expression(paste("Protein Radius"," ",
(paste(mu,m)))),
breaks=seq(0, 0.9,0.1),limits = c(0.3,0.9))+
scale_x_continuous(name=expression(paste("Radius NSP5"," ",
(paste(mu,m)))))+
theme(legend.position = "none",axis.text.x = element_text(angle = 90, vjust = 0.5))
p
#################################################################
# Study of the linear regression.
# NSP2 vs VP6
data<-data.frame(x=VP6$ratioNSP5/100,y=VP6$ratioOther/100)
LM_VP6<-LMbyProtein(data,"VP6")
# NSP5 vs VP4
data<-data.frame(x=VP4$ratioNSP5/100,y=VP4$ratioOther/100)
LM_VP4<-LMbyProtein(data,"VP4")
##-----------------------------------------------------##
## Coefficients of the linear regression
coefficients<-rbind(LM_VP6$coef,LM_VP4$coef)
colnames(coefficients)<-c("Estimate","Std.Error","t.value","p.value")
coefficients<-data.frame(Protein =c("VP6","VP4"),coefficients)
coefficients$Protein<-factor(coefficients$Protein,levels = levels(coefficients$Protein)[c(2,1)])
ggplot(coefficients,aes(x = Protein,y = Estimate,color=Protein))+
geom_errorbar(ymin = coefficients$Estimate - coefficients$Std.Error,
ymax = coefficients$Estimate + coefficients$Std.Error,
width = 0.4 , size=0.4)+geom_point(size=1.5)+
scale_y_continuous(breaks = seq(1.25,1.7,0.1), labels = seq(1.25,1.7,0.1),limits = c(1.25,1.7))+
theme(legend.position = "none",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab("Slope Estimation & CI")+geom_text(aes(y = Estimate,x=c(0.7,1.7),
label = format(Estimate, scientific = FALSE)))
LM_VP6$Res_plot
LM_VP4$Res_plot
#===================================================================================
# Inferential analysis (test between the radius of the proteins.)
# Resume the data
# Test
KW_VP6<-wilcox.test(VP6$ratioOther/100,VP6$ratioNSP5/100,conf.int = TRUE)
KW_VP4<-wilcox.test(VP4$ratioOther/100,VP4$ratioNSP5/100,conf.int = TRUE)
# p-value
p_value=c(KW_VP6$p.value,KW_VP4$p.value)
# W
W=c(KW_VP6$statistic, KW_VP4$statistic)
# DF
Diff_Location=c(KW_VP6$estimate, KW_VP4$estimate)
# CI
lessCoef<-c(KW_VP6$conf.int[1], KW_VP4$conf.int[1])
greatCoef<-c(KW_VP6$conf.int[2], KW_VP4$conf.int[2])
# Create data frame
wilcoxTest<-data.frame(Protein = c("VP6","VP4"),W,Diff_Location,lessCoef,greatCoef,p_value)
wilcoxTest$Protein<-factor(wilcoxTest$Protein,levels = levels(wilcoxTest$Protein)[c(2,1)])
wilcoxTest
ggplot(wilcoxTest,aes(x = Protein,y = Diff_Location,color=Protein))+
geom_errorbar(ymin = lessCoef, ymax = greatCoef,width = 0.3 , size=1)+
geom_point(size=3)+
scale_y_continuous(breaks = seq(0.05,0.3,0.05), labels = seq(0.05,0.3,0.05),limits = c(0.05,0.3))+
theme(legend.position = "none",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab("Difference Location")+geom_text(aes(y = Diff_Location,x=c(0.7,1.7),
label = format(p_value, scientific = TRUE)))
#===================================================================================
# Residuals errors for each linear regression model. The gray line represent the
# regression model, the points over the line are the predicted values,
# and the dots filled with a color gradient are the real values. The errors between
# the predicted and real values, are represented as a gradient of colors as follows
# (from lowest/coldest to highest/warmest).
# NSP2 vs VP6
data<-data.frame(x=VP6$ratioNSP5/100,y=VP6$ratioOther/100)
LM_VP6<-LMbyProtein(data,"VP6")
# NSP5 vs VP4
data<-data.frame(x=VP4$ratioNSP5/100,y=VP4$ratioOther/100)
LM_VP4<-LMbyProtein(data,"VP4")
##-----------------------------------------------------##
## Coefficients of the linear regression
coefficients<-rbind(LM_VP6$coef,LM_VP4$coef)
colnames(coefficients)<-c("Estimate","Std.Error","t.value","p.value")
coefficients<-data.frame(Protein =c("VP6","VP4"),coefficients)
coefficients$Protein<-factor(coefficients$Protein,levels = levels(coefficients$Protein)[c(2,1)])
ggplot(coefficients,aes(x = Protein,y = Estimate,color=Protein))+
geom_errorbar(ymin = coefficients$Estimate - coefficients$Std.Error,
ymax = coefficients$Estimate + coefficients$Std.Error,
width = 0.4 , size=0.4)+geom_point(size=1.5)+
scale_y_continuous(breaks = seq(1.25,1.7,0.1), labels = seq(1.25,1.7,0.1),limits = c(1.25,1.7))+
theme(legend.position = "none",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab("Slope Estimation & CI")+geom_text(aes(y = Estimate,x=c(0.7,1.7),
label = format(Estimate, scientific = FALSE)))
coefficients
LM_VP6$Res_plot
LM_VP4$Res_plot
install.packages(c("geomnet", "ggforce"))
# Functions.
#=========================================================================
## Function to do the linear regression analysis ##
LMbyProtein<- function(data,dependent, independent){
fit<-lm(y ~ x - 1,data)
t<-summary(fit)
data$predicted <- predict(fit)   # Save the predicted values
data$residuals <- residuals(fit) # Save the residual values
# Residuals graphic
# Use the residuals to make an aesthetic adjustment
# (e.g. red colour when residual in very high) to highlight points
# which are poorly predicted by the model.
Residuals<-abs(data$residuals)
res_plot<-ggplot(data, aes(x = x, y = y)) +
geom_smooth(method = "lm",formula = y~x-1, se = FALSE, color = "lightgrey") +
geom_segment(aes(xend = x, yend = predicted), alpha = .2) +
geom_point(aes(color = Residuals)) + # size also mapped
geom_point(aes(y = predicted),shape = 1)+
scale_color_continuous(low = "black", high = "red") +
guides(color = guide_colorbar())+
scale_x_continuous(breaks = seq(0,max(data$x)+0.1,by = 0.1))+
scale_y_continuous(breaks = seq(0,max(data$y)+0.1,by = 0.1))+
geom_label(x = min(data$x), hjust =0, y = max(data$y)-0.05,
label = paste("RSE=", abbreviate(as.character(t$sigma),5),"\n",
"R-squared=", abbreviate(as.character(t$r.squared),5)))+
ylab(dependent)+xlab(independent)+scale_fill_continuous(guide = guide_legend()) +
theme(legend.key.width = unit(2.6, 'lines'), legend.position="bottom",
axis.text.y =element_text(size=15),
axis.text.x =element_text(size=15))
# Coeff
coef<-t$coefficients
# Residuals
residual<-t$residuals
list(Res_plot=res_plot,coef=coef,res=residual)
}
#####################################################################
# Load Libraries
library(dplyr)
library(ggplot2)
library(cowplot)
library(plotly)
library(ggsignif)
# Change work directory and Load data
setwd('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/ResultsCSV/NSP2')
VP4<-read.csv('NSP2rojo-VP4verde.csv')
VP6<-read.csv('NSP2rojo-VP6verde.csv')
VP760<-read.csv('NSP2rojo-VP760verde.csv')
VP7159<-read.csv('NSP2rojo-VP7159verde.csv')
NSP4<-read.csv('NSP4rojo-NSP2verde.csv')
NSP5<-read.csv('NSP5rojo-NSP2verde.csv')
VP1<-read.csv('NSP2rojo-VP1verde.csv')
VP2<-read.csv('NSP2rojo-VP2verde.csv')
##-----------------------------------------------
## Data manipulation
# Create a factor variable with the protein name
VP4<-mutate(VP4, Protein='VP4')
VP6<-mutate(VP6, Protein='VP6')
VP760<-mutate(VP760, Protein='VP760')
VP7159<-mutate(VP7159, Protein='VP7159')
NSP4<-mutate(NSP4, Protein='NSP4')
NSP5<-mutate(NSP5, Protein='NSP5')
VP1<-mutate(VP1, Protein='VP1')
VP2<-mutate(VP2, Protein='VP2')
# Remove outliers
VP4<-remove_outliers(VP4)
VP6<-remove_outliers(VP6)
# Remove outliers in data frame
remove_outliers <- function(data, na.rm = TRUE, ...) {
x<-data$ratioOther
qnt <- quantile(x, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
data$ratioOther<-y
na.omit(data,cols="ratioOther")
}
# Remove outliers
VP4<-remove_outliers(VP4)
VP6<-remove_outliers(VP6)
VP760<-remove_outliers(VP760)
VP7159<-remove_outliers(VP7159)
NSP4<-remove_outliers(NSP4)
NSP5<-remove_outliers(NSP5)
VP1<-remove_outliers(VP1)
VP2<-remove_outliers(VP2)
# Merge the data in a same data frame
viroData<-rbind(VP6,NSP4,NSP5,VP4,VP7159,VP760,VP1,VP2)
viroData$Protein<-as.factor(viroData$Protein)
viroData$Distance=viroData$Distance/100
viroData$ratioNSP2=viroData$ratioNSP2/100
viroData$ratioOther=viroData$ratioOther/100
# Change order factor variable
viroData$Protein<-factor(viroData$Protein,levels = levels(viroData$Protein)[c(2,1,3,4,6,5,8,7)])
ggplot(viroData,aes(Protein,fill=Protein))+geom_histogram(stat = "count")+
theme(legend.position = "none",axis.text.x = element_text(angle = 45, vjust = 0.5))+
geom_text(stat = "count", aes(label = ..count.., y = ..count..+2))
## END DATA PREPARATION ##
#----------------------
# Lineal dependence between NSP2 and the others proteins. That is for the ratio of the circle
p<-ggplot(viroData, aes(x = ratioNSP2, y = ratioOther,color=Protein)) + geom_point(show.legend=FALSE) +
facet_grid(~ Protein)+ xlab("Ratio NSP2")+
geom_smooth(method='lm',formula=y~x-1,show.legend=FALSE)+
scale_y_continuous(name=expression(paste("Protein Radius"," ",
(paste(mu,m)))),
breaks=seq(0, max(viroData$ratioOther)+0.4,0.1))+
scale_x_continuous(name=expression(paste("Radius NSP2"," ",
(paste(mu,m)))))+
theme(legend.position = "none",axis.text.x = element_text(angle = 90, vjust = 0.5))
p
# Load the functions saved in Functions.R
load('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/Functions.R')
# Load the functions saved in Functions.R
load('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/Functions.R')
# Load the functions saved in Functions.R
source('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/Functions.R')
getwd()
# Load the functions saved in Functions.R
source(../R Codes/Functions.R')
# Load the functions saved in Functions.R
source('.../R Codes/Functions.R')
/
# Load the functions saved in Functions.R
source('/R Codes/Functions.R')
# Load the functions saved in Functions.R
source('R Codes/Functions.R')
# Load the functions saved in Functions.R
source('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/Functions.R')
# Set work directory
setwd('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/ResultsCSV/NSP5/')
LM_VP4<-LMbyProtein(data,"VP4","NSP5")
LM_VP4$Res_plot
#' This script analyses the distribution of the viral proteins into
#' the viroplasm taking NSP2 as the reference protein. For details about
#' the full research consult the below article:
#' Garcés et al. Nanoscale organization of rotavirus replication machineries.
#' eLife 2019;8:e42906. https://elifesciences.org/articles/42906,
#' doi: 10.7554/eLife.42906.
#'
#' @param This script uses the data collected for each protein combination that
#' are stored in the csv files:
#' 1- NSP2rojo-VP4verde.csv
#' 2- NSP2rojo-VP6verde.csv
#' 3- NSP2rojo-VP760verde.csv
#' 4- NSP2rojo-VP7159verde.csv
#' 5- NSP2rojo-VP1verde.csv
#' 6- NSP2rojo-VP2verde.csv
#' 7- NSP4rojo-NSP2verde.csv
#' 8- NSP5rojo-NSP2verde.csv
#' All these files have the following structure:
#' Column 1: Distance between the distribution of both proteins.
#' Column 2: Radius of the circumference that adjust the central protein.
#' Column 3: Radius of the circumference that adjust the other protein.
#' @return A set of graphics and statistics. See below for details.
#' @author Yasel Garces (88yasel@gmail.com)
#===================================================================================
#===================================================================================
## FUNCTIONS
# Load the functions saved in Functions.R
source('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/Functions.R')
#===================================================================================
# Load Libraries
library(dplyr)
library(ggplot2)
library(cowplot)
library(plotly)
library(ggsignif)
theme_set(theme_cowplot()) # Change theme
# Set work directory
setwd('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/ResultsCSV/NSP2')
# Load data
VP4<-read.csv('NSP2rojo-VP4verde.csv')
VP6<-read.csv('NSP2rojo-VP6verde.csv')
VP760<-read.csv('NSP2rojo-VP760verde.csv')
VP7159<-read.csv('NSP2rojo-VP7159verde.csv')
NSP4<-read.csv('NSP4rojo-NSP2verde.csv')
NSP5<-read.csv('NSP5rojo-NSP2verde.csv')
VP1<-read.csv('NSP2rojo-VP1verde.csv')
VP2<-read.csv('NSP2rojo-VP2verde.csv')
#===================================================================================
## Data manipulation
# Add a new variable with the name of the NSP2 accompanying protein
VP4<-mutate(VP4, Protein='VP4')
VP6<-mutate(VP6, Protein='VP6')
VP760<-mutate(VP760, Protein='VP760')
VP7159<-mutate(VP7159, Protein='VP7159')
NSP4<-mutate(NSP4, Protein='NSP4')
NSP5<-mutate(NSP5, Protein='NSP5')
VP1<-mutate(VP1, Protein='VP1')
VP2<-mutate(VP2, Protein='VP2')
# Merge the data in a same data frame
viroData<-rbind(VP6,NSP4,NSP5,VP4,VP7159,VP760,VP1,VP2)
viroData$Protein<-as.factor(viroData$Protein)
viroData$Distance=viroData$Distance/100
viroData$ratioNSP2=viroData$ratioNSP2/100
viroData$ratioOther=viroData$ratioOther/100
# Change order factor variable
viroData$Protein<-factor(viroData$Protein,levels = levels(viroData$Protein)[c(2,1,3,4,6,5,8,7)])
ggplot(viroData,aes(Protein,fill=Protein))+geom_histogram(stat = "count")+
theme(legend.position = "none",axis.text.x = element_text(angle = 45, vjust = 0.5))+
geom_text(stat = "count", aes(label = ..count.., y = ..count..+2))
## END DATA PREPARATION ##
#----------------------
# Lineal dependence between NSP2 and the others proteins. That is for the ratio of the circle
p<-ggplot(viroData, aes(x = ratioNSP2, y = ratioOther,color=Protein)) + geom_point(show.legend=FALSE) +
facet_grid(~ Protein)+ xlab("Ratio NSP2")+
geom_smooth(method='lm',formula=y~x-1,show.legend=FALSE)+
scale_y_continuous(name=expression(paste("Protein Radius"," ",
(paste(mu,m)))),
breaks=seq(0, max(viroData$ratioOther)+0.4,0.1))+
scale_x_continuous(name=expression(paste("Radius NSP2"," ",
(paste(mu,m)))))+
theme(legend.position = "none",axis.text.x = element_text(angle = 90, vjust = 0.5))
p
#' This script analyses the distribution of the viral proteins into
#' the viroplasm taking NSP2 as the reference protein. For details about
#' the full research consult the below article:
#' Garcés et al. Nanoscale organization of rotavirus replication machineries.
#' eLife 2019;8:e42906. https://elifesciences.org/articles/42906,
#' doi: 10.7554/eLife.42906.
#'
#' @param This script uses the data collected for each protein combination that
#' are stored in the csv files:
#' 1- NSP2rojo-VP4verde.csv
#' 2- NSP2rojo-VP6verde.csv
#' 3- NSP2rojo-VP760verde.csv
#' 4- NSP2rojo-VP7159verde.csv
#' 5- NSP2rojo-VP1verde.csv
#' 6- NSP2rojo-VP2verde.csv
#' 7- NSP4rojo-NSP2verde.csv
#' 8- NSP5rojo-NSP2verde.csv
#' All these files have the following structure:
#' Column 1: Distance between the distribution of both proteins.
#' Column 2: Radius of the circumference that adjust the central protein.
#' Column 3: Radius of the circumference that adjust the other protein.
#' @return A set of graphics and statistics. See below for details.
#' @author Yasel Garces (88yasel@gmail.com)
#===================================================================================
#===================================================================================
## FUNCTIONS
# Load the functions saved in Functions.R
source('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/Functions.R')
#===================================================================================
# Load Libraries
library(dplyr)
library(ggplot2)
library(cowplot)
library(plotly)
library(ggsignif)
theme_set(theme_cowplot()) # Change theme
# Set work directory
setwd('/home/yasel/TRABAJO/IBt/Viroplasms/GitHub Codes Paper  (No Mover)/Nanoscale_organization_of_rotavirus_replication_machineries/R Codes/ResultsCSV/NSP2')
# Load data
VP4<-read.csv('NSP2rojo-VP4verde.csv')
VP6<-read.csv('NSP2rojo-VP6verde.csv')
VP760<-read.csv('NSP2rojo-VP760verde.csv')
VP7159<-read.csv('NSP2rojo-VP7159verde.csv')
NSP4<-read.csv('NSP4rojo-NSP2verde.csv')
NSP5<-read.csv('NSP5rojo-NSP2verde.csv')
VP1<-read.csv('NSP2rojo-VP1verde.csv')
VP2<-read.csv('NSP2rojo-VP2verde.csv')
#===================================================================================
## Data manipulation
# Add a new variable with the name of the NSP2 accompanying protein
VP4<-mutate(VP4, Protein='VP4')
VP6<-mutate(VP6, Protein='VP6')
VP760<-mutate(VP760, Protein='VP760')
VP7159<-mutate(VP7159, Protein='VP7159')
NSP4<-mutate(NSP4, Protein='NSP4')
NSP5<-mutate(NSP5, Protein='NSP5')
VP1<-mutate(VP1, Protein='VP1')
VP2<-mutate(VP2, Protein='VP2')
# Remove the outliers with the objective to obtain a more accurate model.
VP4<-remove_outliers(VP4)
VP6<-remove_outliers(VP6)
VP760<-remove_outliers(VP760)
VP7159<-remove_outliers(VP7159)
NSP4<-remove_outliers(NSP4)
NSP5<-remove_outliers(NSP5)
VP1<-remove_outliers(VP1)
VP2<-remove_outliers(VP2)
# Merge the data and convert the "Protein" column to a factor variable
viroData<-rbind(VP6,NSP4,NSP5,VP4,VP7159,VP760,VP1,VP2)
viroData$Protein<-as.factor(viroData$Protein)
# Convert from pixels to microns (this is based on our experimetal design, for
# other experiments you need to take care about how to do this conversion).
viroData$Distance=viroData$Distance/100
viroData$ratioNSP2=viroData$ratioNSP2/100
viroData$ratioOther=viroData$ratioOther/100
# Orders the factor levels
viroData$Protein<-factor(viroData$Protein,levels = levels(viroData$Protein)[c(2,1,3,4,6,5,8,7)])
ggplot(viroData,aes(Protein,fill=Protein))+geom_histogram(stat = "count")+
theme(legend.position = "none",axis.text.x = element_text(angle = 45, vjust = 0.5))+
geom_text(stat = "count", aes(label = ..count.., y = ..count..+2))
#===================================================================================
# Lineal dependence between NSP2 and the others proteins. That is for the ratio of the circle
p<-ggplot(viroData, aes(x = ratioNSP2, y = ratioOther,color=Protein)) + geom_point(show.legend=FALSE) +
facet_grid(~ Protein)+ xlab("Ratio NSP2")+
geom_smooth(method='lm',formula=y~x-1,show.legend=FALSE)+
scale_y_continuous(name=expression(paste("Protein Radius"," ",
(paste(mu,m)))),
breaks=seq(0, max(viroData$ratioOther)+0.4,0.1))+
scale_x_continuous(name=expression(paste("Radius NSP2"," ",
(paste(mu,m)))))+
theme(legend.position = "none",axis.text.x = element_text(angle = 90, vjust = 0.5))
p
######################################################################
# Model Representation
######################################################################
library("geomnet")
library(ggforce)
mydata<-data.frame(
Protein = c("NSP5","NSP2","NSP4","VP2","VP1","VP6","VP4","VP760","VP7159"),
Radius = c(0.6,
1,
1.1,
1.6,
2.1,
2.2,
3.2,
3.7,
3.8
))
mydata<-mutate(mydata,Start=rep(0,9),End=rep(2*pi,9))
mydata$Protein<-factor(mydata$Protein,levels =
levels(mydata$Protein)[c(3,1,2,4,5,7,6,9,8)])
mydata$Radius<-as.numeric(mydata$Radius)
p<-ggplot()+geom_point()+
geom_arc(aes(x0=0, y0=0, r=Radius, start=Start,end=End,
color=Protein), data=mydata,size = 5)+
geom_text(data=mydata, mapping=aes(x=runif(9,-1,1),
y=Radius-runif(9,0,0.1),
label=Protein), size=4)+
scale_x_discrete()+scale_y_discrete()+ylab("")+xlab("")
p
######################################################################
# Model Representation
######################################################################
library(geomnet)
library(ggforce)
