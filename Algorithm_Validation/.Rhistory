0.0226323941
0.1148270815
0.0019398113
0.0012425835
0.0219088547
0.0764074224
0.0005929548
0.0444968564
0.0011811055
0.0088891244
0.0175207402
0.0948440285
0.0459293996
0.1464285609
0.0057336277
0.000277107
0.0102075174
0.0169061233
0.0007437489
0.0651374313
0.0012340728
4.75043365440951E-06
0.0007884044
)
x<-c(0.0005454524,0.0006558234, 0.0096281964,4.39430205082528E-06,0.00008605,0.0004917736,0.0005454524,
0.0006558234,0.0096281964,4.39430205082524E-06,0.00008605,0.0004917736,0.0005740538,0.0006627482,
0.0017401354,0.0002118488,0.0003556951,0.0004657185,0.0058666916,0.0071389509,0.0208759226,             0.0117828111,0.0153601869,0.0328699184,0.0004707917,0.0030050641,0.0005880668,0.004729943,              0.0008960745,0.0690983859,0.0119387234,0.0095356661,0.0212097299,0.0009547172,0.0002189336,
0.0010563029,0.0367329072,0.0159300077,0.02823377,0.0005283189,0.0004816067,0.0002843965,
0.0864217847,,0.0226323941,0.1148270815,0.0019398113,0.0012425835,0.0219088547,0.0764074224,
0.0005929548,0.0444968564,0.0011811055,0.0088891244,0.0175207402,0.0948440285,0.0459293996,
0.1464285609,0.0057336277,0.000277107,0.0102075174,0.0169061233,0.0007437489,0.0651374313,
0.0012340728,4.75043365440951E-06,0.0007884044)
x<-c(0.0005454524,0.0006558234, 0.0096281964,4.39430205082528E-06,0.00008605,0.0004917736,0.0005454524,
0.0006558234,0.0096281964,4.39430205082524E-06,0.00008605,0.0004917736,0.0005740538,0.0006627482,
0.0017401354,0.0002118488,0.0003556951,0.0004657185,0.0058666916,0.0071389509,0.0208759226,
0.0117828111,0.0153601869,0.0328699184,0.0004707917,0.0030050641,0.0005880668,0.004729943,              0.0008960745,0.0690983859,0.0119387234,0.0095356661,0.0212097299,0.0009547172,0.0002189336,
0.0010563029,0.0367329072,0.0159300077,0.02823377,0.0005283189,0.0004816067,0.0002843965,
0.0864217847,0.0226323941,0.1148270815,0.0019398113,0.0012425835,0.0219088547,0.0764074224,
0.0005929548,0.0444968564,0.0011811055,0.0088891244,0.0175207402,0.0948440285,0.0459293996,
0.1464285609,0.0057336277,0.000277107,0.0102075174,0.0169061233,0.0007437489,0.0651374313,
0.0012340728,4.75043365440951E-06,0.0007884044)
0.0012340728,4.75043365440951E-06,0.0007884044)
x<-c(0.0005454524,0.0006558234, 0.0096281964,4.39430205082528E-06,0.00008605,0.0004917736,0.0005454524,
0.0006558234,0.0096281964,4.39430205082524E-06,0.00008605,0.0004917736,0.0005740538,0.0006627482,
0.0017401354,0.0002118488,0.0003556951,0.0004657185,0.0058666916,0.0071389509,0.0208759226,
0.0117828111,0.0153601869,0.0328699184,0.0004707917,0.0030050641,0.0005880668,0.004729943,              0.0008960745,0.0690983859,0.0119387234,0.0095356661,0.0212097299,0.0009547172,0.0002189336,
0.0010563029,0.0367329072,0.0159300077,0.02823377,0.0005283189,0.0004816067,0.0002843965,
0.0864217847,0.0226323941,0.1148270815,0.0019398113,0.0012425835,0.0219088547,0.0764074224,
0.0005929548,0.0444968564,0.0011811055,0.0088891244,0.0175207402,0.0948440285,0.0459293996,
0.1464285609,0.0057336277,0.000277107,0.0102075174,0.0169061233,0.0007437489,0.0651374313,
0.0012340728,4.75043365440951E-06,0.0007884044)
x
x>=0.05
sum(x>=0.05)
sum(x<=0.05)
# Considerer the mean by each hour
resume <- summarise(group_by(validation,ID,Algorithm,Angle),
MeanDistance=mean(DistanceMean),StdDistance=mean(DistanceStd),
MeanError=mean(Error),StdError=sd(Error))
#' Analysis of the algorithm validation simulation.
#' @param Simulation.csv: It is only necessary to have in
#' the directory this files with the results of the ssimulation.
#' @return BoxplotError.pdf: Boxplot of the error distribution by algorithm
#' and occlussion angle.
#' @return PlotErrorAlgorithm.pdf: Line plot with the error by algorithm
#' and occlussion angle.
#' @return PlotErrorDLSFC.pdf: Error of the algorithm DLSFC.
#' @return PlotErrorDLSFC_ALSFC.pdf: Error of the algorithms DLSFC and ALSFC.
#' @return Binomila test results for all the algorithms and partial occlussion angles.
#' @author Yasel Garces (88yasel@gmail.com)
#' @note For details consult the paper: Nanoscale organization of rotavirus replication machineries, eLife.
# Load libraries
library(ggplot2)
library(cowplot)
library(dplyr)
library(plyr)
library(scales)
library(RColorBrewer)
# Set cowplot theme
theme_set(theme_cowplot())
# Load workdirectory
setwd('/home/yasel/Dropbox/Paper Viroplasmas/Programs/AlgorithmValidation')
# Load data
validation<-read.csv(file = 'SimulationResult.csv')
# Convert variables
validation$ID<-as.factor(validation$ID)
validation$Angle<-as.factor(validation$Angle)
validation$Angle <- factor(validation$Angle, levels = levels(validation$Angle)[c(4,3,2,1)],
labels = c(expression(0),expression(frac(3*pi,2)-2*pi),
expression(pi-2*pi),expression(frac(pi,2)-2*pi)))
validation$Algorithm <- factor(validation$Algorithm, levels = levels(validation$Algorithm)[c(3,2,1)])
# Considerer the mean by each hour
resume <- summarise(group_by(validation,ID,Algorithm,Angle),
MeanDistance=mean(DistanceMean),StdDistance=mean(DistanceStd),
MeanError=mean(Error),StdError=sd(Error))
resume
#Create a custom color scale
myColors <- c("red","blue","green")
names(myColors) <- levels(validation$Algorithm)
colScale <- scale_colour_manual(name = "Algorithm",values = myColors)
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.002)+colScale+
scale_fill_manual(values=c("red","blue","green"))
resume
validation
ggplot(data = resume,aes(x=MeanDistance,y = MeanError,group=Algorithm,color=Algorithm))+geom_line()+
theme(legend.position = "bottom")+ylab(expression(paste("Mean Error"," ","(",mu,m,")")))+
facet_grid(Angle~.,labeller = label_parsed)+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(breaks = round(seq(min(resume$MeanDistance), max(resume$MeanDistance), length.out = 7),1),
name = expression(paste("Mean Points Distance"," ","(",mu,m,")")),
sec.axis = sec_axis(~ . * 1,
breaks = round(seq(min(resume$MeanDistance),
max(resume$MeanDistance), length.out = 7),1),
labels = round(seq(min(resume$StdDistance),
max(resume$StdDistance), length.out = 7),1),
name = "Standard Deviation"))+
colScale
# Load libraries
library(ggplot2)
library(dplyr)
library(plyr)
library(scales)
library(RColorBrewer)
# Set cowplot theme
theme_set(theme_cowplot())
# Load workdirectory
setwd('/home/yasel/Dropbox/Paper Viroplasmas/Programs/AlgorithmValidation')
# Load data
validation<-read.csv(file = 'SimulationResult.csv')
# Convert variables
validation$ID<-as.factor(validation$ID)
validation$Angle<-as.factor(validation$Angle)
validation$Angle <- factor(validation$Angle, levels = levels(validation$Angle)[c(4,3,2,1)],
labels = c(expression(0),expression(frac(3*pi,2)-2*pi),
expression(pi-2*pi),expression(frac(pi,2)-2*pi)))
validation$Algorithm <- factor(validation$Algorithm, levels = levels(validation$Algorithm)[c(3,2,1)])
# Considerer the mean by each hour
resume <- summarise(group_by(validation,ID,Algorithm,Angle),
MeanDistance=mean(DistanceMean),StdDistance=mean(DistanceStd),
MeanError=mean(Error),StdError=sd(Error))
resume
validation
View(validation)
# Load libraries
library(cowplot)
library(dplyr)
library(plyr)
library(scales)
library(RColorBrewer)
# Set cowplot theme
theme_set(theme_cowplot())
# Load workdirectory
setwd('/home/yasel/Dropbox/Paper Viroplasmas/Programs/AlgorithmValidation')
# Load data
validation<-read.csv(file = 'SimulationResult.csv')
# Convert variables
validation$ID<-as.factor(validation$ID)
validation$Angle<-as.factor(validation$Angle)
validation$Angle <- factor(validation$Angle, levels = levels(validation$Angle)[c(4,3,2,1)],
labels = c(expression(0),expression(frac(3*pi,2)-2*pi),
expression(pi-2*pi),expression(frac(pi,2)-2*pi)))
validation$Algorithm <- factor(validation$Algorithm, levels = levels(validation$Algorithm)[c(3,2,1)])
# Considerer the mean by each hour
resume <- summarise(group_by(validation,ID,Algorithm,Angle),
MeanDistance=mean(DistanceMean),StdDistance=mean(DistanceStd),
MeanError=mean(Error),StdError=sd(Error))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.002)+colScale+
scale_fill_manual(values=c("red","blue","green"))
#Create a custom color scale
myColors <- c("red","blue","green")
names(myColors) <- levels(validation$Algorithm)
colScale <- scale_colour_manual(name = "Algorithm",values = myColors)
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.002)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = resume,aes(x=MeanDistance,y = MeanError,group=Algorithm,color=Algorithm))+geom_line()+
theme(legend.position = "bottom")+ylab(expression(paste("Mean Error"," ","(",mu,m,")")))+
facet_grid(Angle~.,labeller = label_parsed)+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(breaks = round(seq(min(resume$MeanDistance), max(resume$MeanDistance), length.out = 7),1),
name = expression(paste("Mean Points Distance"," ","(",mu,m,")")),
sec.axis = sec_axis(~ . * 1,
breaks = round(seq(min(resume$MeanDistance),
max(resume$MeanDistance), length.out = 7),1),
labels = round(seq(min(resume$StdDistance),
max(resume$StdDistance), length.out = 7),1),
name = "Standard Deviation"))+
colScale
detach("package:plyr", unload = TRUE)
# Set cowplot theme
theme_set(theme_cowplot())
# Load workdirectory
setwd('/home/yasel/Dropbox/Paper Viroplasmas/Programs/AlgorithmValidation')
# Load data
validation<-read.csv(file = 'SimulationResult.csv')
# Convert variables
validation$ID<-as.factor(validation$ID)
validation$Angle<-as.factor(validation$Angle)
validation$Angle <- factor(validation$Angle, levels = levels(validation$Angle)[c(4,3,2,1)],
labels = c(expression(0),expression(frac(3*pi,2)-2*pi),
expression(pi-2*pi),expression(frac(pi,2)-2*pi)))
validation$Algorithm <- factor(validation$Algorithm, levels = levels(validation$Algorithm)[c(3,2,1)])
# Considerer the mean by each hour
resume <- summarise(group_by(validation,ID,Algorithm,Angle),
MeanDistance=mean(DistanceMean),StdDistance=mean(DistanceStd),
MeanError=mean(Error),StdError=sd(Error))
resume
head(resume)
# Considerer the mean by each hour
resume <- summarise(group_by(validation,ID,Algorithm,Angle),
MeanDistance=mean(DistanceMean),StdDistance=mean(DistanceStd),
MeanError=mean(Error),StdError=sd(Error))
#Create a custom color scale
myColors <- c("red","blue","green")
names(myColors) <- levels(validation$Algorithm)
colScale <- scale_colour_manual(name = "Algorithm",values = myColors)
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.002)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = resume,aes(x=MeanDistance,y = MeanError,group=Algorithm,color=Algorithm))+geom_line()+
theme(legend.position = "bottom")+ylab(expression(paste("Mean Error"," ","(",mu,m,")")))+
facet_grid(Angle~.,labeller = label_parsed)+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(breaks = round(seq(min(resume$MeanDistance), max(resume$MeanDistance), length.out = 7),1),
name = expression(paste("Mean Points Distance"," ","(",mu,m,")")),
sec.axis = sec_axis(~ . * 1,
breaks = round(seq(min(resume$MeanDistance),
max(resume$MeanDistance), length.out = 7),1),
labels = round(seq(min(resume$StdDistance),
max(resume$StdDistance), length.out = 7),1),
name = "Standard Deviation"))+
colScale
# ---------------------------------------------------
# Subset data (only GLSFC)
test<-subset(resume,subset = Algorithm==c("DLSFC"))
ggplot(data = test,aes(x=MeanDistance,y = MeanError,color=Algorithm))+geom_line()+
theme(legend.position = "none")+ylab(expression(paste("Mean Error"," ","(",mu,m,")")))+
facet_grid(Angle~.,labeller = label_parsed)+ geom_ribbon(aes(ymax = MeanError + StdError,
ymin= MeanError - StdError,
fill = Algorithm),linetype="blank",alpha=0.3)+
scale_x_continuous(breaks = round(seq(min(resume$MeanDistance), max(resume$MeanDistance), length.out = 7),1),
name = expression(paste("Mean Points Distance"," ","(",mu,m,")")),
sec.axis = sec_axis(~ . * 1,
breaks = round(seq(min(resume$MeanDistance),
max(resume$MeanDistance), length.out = 7),1),
labels = round(seq(min(resume$StdDistance),
max(resume$StdDistance), length.out = 7),1),
name = "Standard Deviation"))+colScale+
scale_fill_manual(values=c("blue"))+geom_hline(yintercept = 0.1732)
# ---------------------------------------------------
test<-filter(resume,Algorithm!=c("GLSFC"))
ggplot(data = test,aes(x=MeanDistance,y = MeanError,color=Algorithm))+geom_line()+
theme(legend.position = "none",axis.text.x = element_text(angle = 90, hjust = 1))+
ylab(expression(paste("Mean Error"," ","(",mu,m,")")))+
facet_grid(Angle~Algorithm,labeller = label_parsed)+ geom_ribbon(aes(ymax = MeanError + StdError,
ymin= MeanError - StdError,
fill = Algorithm),linetype="blank",
alpha=0.2)+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(breaks = round(seq(min(resume$MeanDistance), max(resume$MeanDistance), length.out = 7),1),
name = expression(paste("Mean Points Distance"," ","(",mu,m,")")),
sec.axis = sec_axis(~ . * 1,
breaks = round(seq(min(resume$MeanDistance),
max(resume$MeanDistance), length.out = 7),1),
labels = round(seq(min(resume$StdDistance),
max(resume$StdDistance), length.out = 7),1),
name = "Standard Deviation"))+colScale+
scale_fill_manual(values=c("blue","green"))+geom_hline(yintercept = 0.1732)
# ---------------------------------------------------
# Binomial Test
# Successful number of fit in Radius
adjust<-ddply(validation, c("Algorithm","Angle"), function(x) sum(abs(x$Error)<0.1732))
# ---------------------------------------------------
# Binomial Test
library(plyr)
# Successful number of fit in Radius
adjust<-ddply(validation, c("Algorithm","Angle"), function(x) sum(abs(x$Error)<0.1732))
total<-ddply(validation, c("Algorithm","Angle"), function(x) length(x$Error))
# Hypothesis test (Test of Equal or Given Proportions)
by(adjust,
adjust[,c("Algorithm","Angle")],
function(x) binom.test(x$V1,10000,p =0.7,alternative = "greater"))
This function generates the points of an ellipse using the parametric representation and polar coordinates system of this primitive.
5.
install.packages("ploty")
install.packages("plotly")
# Transform variables
validation$ID<-as.factor(validation$ID)
validation$Angle<-as.factor(validation$Angle)
validation$Angle <- factor(validation$Angle, levels = levels(validation$Angle)[c(4,3,2,1)],
labels = c(expression(0),expression(frac(pi,2)),
expression(pi),expression(frac(3*pi,2))))
validation$Algorithm <- factor(validation$Algorithm, levels = levels(validation$Algorithm)[c(3,2,1)])
# Considerer the mean by each hour
resume <- summarise(group_by(validation,ID,Algorithm,Angle),
MeanDistance=mean(DistanceMean),StdDistance=mean(DistanceStd),
MeanError=mean(Error),StdError=sd(Error))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.002)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.05)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.5)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.00005)+colScale+
scale_fill_manual(values=c("red","blue","green"))
#Create a custom color scale
myColors <- c("red","blue","green")
names(myColors) <- levels(validation$Algorithm)
colScale <- scale_colour_manual(name = "Algorithm",values = myColors)
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.00005)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.8)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.002)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.0002)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.02)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(pi, 2) - 2 * pi"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue")+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(3*pi, 2)"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.02)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(3*pi, 2)"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.002)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(3*pi,2)"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.002)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation,Angle == "frac(3*pi,2)"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue")+colScale+
scale_fill_manual(values=c("red","blue","green"))
# Set cowplot theme
theme_set(theme_cowplot())
# Load work directory
setwd('/home/yasel/Dropbox/Paper Viroplasmas/Programs/AlgorithmValidation')
# Load data
validation<-read.csv(file = 'SimulationResult.csv')
# Transform variables
validation$ID<-as.factor(validation$ID)
validation$Angle<-as.factor(validation$Angle)
validation$Angle <- factor(validation$Angle, levels = levels(validation$Angle)[c(4,3,2,1)],
labels = c(expression(0),expression(frac(pi,2)),
expression(pi),expression(frac(3*pi,2))))
validation$Algorithm <- factor(validation$Algorithm, levels = levels(validation$Algorithm)[c(3,2,1)])
# Considerer the mean by each hour
resume <- summarise(group_by(validation,ID,Algorithm,Angle),
MeanDistance=mean(DistanceMean),StdDistance=mean(DistanceStd),
MeanError=mean(Error),StdError=sd(Error))
#Create a custom color scale
myColors <- c("red","blue","green")
names(myColors) <- levels(validation$Algorithm)
colScale <- scale_colour_manual(name = "Algorithm",values = myColors)
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation, Angle == "frac(3*pi,2)"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.002)+colScale+
scale_fill_manual(values=c("red","blue","green"))
validation
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation, Angle == "frac(3 * pi, 2)"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.002)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation, Angle == "frac(3 * pi, 2)"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.001)+colScale+
scale_fill_manual(values=c("red","blue","green"))
ggplot(data = validation,aes(x=Algorithm,y = Error,fill=Algorithm))+geom_boxplot(notch = TRUE)+
theme(legend.position = "",axis.text.x = element_text(angle = 45, hjust = 1))+
ylab(expression(paste("Error"," ","(",mu,m,")")))+
facet_grid(.~ Angle,labeller = label_parsed)+geom_hline(yintercept = 0.1732,color="black")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
geom_rect(data = subset(validation, Angle == "frac(3 * pi, 2)"),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,fill="blue",alpha = 0.002)+colScale+
scale_fill_manual(values=c("red","blue","green"))
